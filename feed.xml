<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>JS101</title>
    <link href="feed.xml" rel="self" />
    <link href="" />
    <id>feed.xml</id>
    <entry>
        <title type="html"><![CDATA[保留字]]></title>
        <link href="javascript-101/reserved-words.html"/>
        <published>2015-03-06T00:00:00.000Z</published>
        <updated>2015-03-06T00:00:00.000Z</updated>
        <id>javascript-101/reserved-words.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>JavaScript 有一些“保留字”，或有特殊意义的单词。除非你按照它们的本意来使用，否则你应该避免在代码中使用这些字词。</p>
<ul>
<li><code>break</code></li>
<li><code>case</code></li>
<li><code>catch</code></li>
<li><code>class</code></li>
<li><code>const</code></li>
<li><code>continue</code></li>
<li><code>debugger</code></li>
<li><code>default</code></li>
<li><code>delete</code></li>
<li><code>do</code></li>
<li><code>else</code></li>
<li><code>enum</code></li>
<li><code>export</code></li>
<li><code>extends</code></li>
<li><code>false</code></li>
<li><code>finally</code></li>
<li><code>for</code></li>
<li><code>function</code></li>
<li><code>if</code></li>
<li><code>implements</code></li>
<li><code>import</code></li>
<li><code>in</code></li>
<li><code>instanceof</code></li>
<li><code>interface</code></li>
<li><code>let</code></li>
<li><code>new</code></li>
<li><code>null</code></li>
<li><code>package</code></li>
<li><code>private</code></li>
<li><code>protected</code></li>
<li><code>public</code></li>
<li><code>return</code></li>
<li><code>static</code></li>
<li><code>super</code></li>
<li><code>switch</code></li>
<li><code>this</code></li>
<li><code>throw</code></li>
<li><code>true</code></li>
<li><code>try</code></li>
<li><code>typeof</code></li>
<li><code>var</code></li>
<li><code>void</code></li>
<li><code>while</code></li>
<li><code>with</code></li>
<li><code>yield</code></li>
</ul>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[语法基础]]></title>
        <link href="javascript-101/syntax-basics.html"/>
        <published>2015-03-06T00:00:00.000Z</published>
        <updated>2015-03-06T00:00:00.000Z</updated>
        <id>javascript-101/syntax-basics.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h3 id="注释">注释</h3><p>JavaScript 支持单行和多行注释。注释会被 JavaScript 引擎忽略，所以它对程序的结果没有影响。使用注释为其他开发者记录代码，像 <a href="http://usejsdoc.org/" title="JSDoc">JSDoc</a> 这类工具库，可以帮助生成基于注释的项目文档页面。</p>
<pre>// Single- and multi-line comments.

// This is an example of a single-line comment.

/*
 * this is an example
 * of a
 * multi-line
 * comment.
 */</pre><h3 id="空白">空白</h3><p>空白也被 JavaScript 引擎忽略。有许多工具可以用来去掉程序中的空白，降低了文件的整体大小和改进网络延迟。鉴于这类工具的可用性，空白应该加以利用，以使代码尽可能的易读。</p>
<pre>// Whitespace is insignificant.
var hello = &quot;Hello&quot;;
var world     =      &quot;World!&quot;;</pre><pre>// Semantic whitespace promotes readability.
// Readable code is good!
var foo = function() {

    for ( var i = 0; i &lt; 10; i++ ) {

        alert( i );

    }

};

foo();

// This is much harder to read!
var foo=function() {for(var i=0;i&lt;10;i++){alert(i);}};foo();</pre><h3 id="保留字">保留字</h3><p>当声明用户定义的变量和函数时，有少量的保留字不能被使用。一些保留字已经被实现，一些被保留以供将来使用，还有一些事因为历史原因而保留。<a href="/javascript-101/reserved-words.html">这里</a>是保留字的列表，对保留字的深入解释可以在<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Reserved_Words" title="MDN 保留字"> MDN 的 JavaScript 参考</a>当中找到。</p>
<h3 id="标识符">标识符</h3><p>标识符被用来给变量和函数的唯一名称，以便随后它们可以通过该名称被引用到。标识符名称必须遵循一些规则：</p>
<ul>
<li>不能是保留字。</li>
<li>只能由字母，数字，美元符号和下划线组成。</li>
<li>第一个字符不能是数字。</li>
</ul>
<p>命名标识符的最佳实践是选取一个将来也能对你或者其他开发者有意义的名称。</p>
<pre>// Valid identifier names.
var myAwesomeVariable = &quot;a&quot;;
var myAwesomeVariable2 = &quot;b&quot;;
var my_awesome_variable = &quot;c&quot;;
var $my_AwesomeVariable = &quot;d&quot;;
var _my_awesome_variable_$ = &quot;e&quot;;</pre><h3 id="变量定义">变量定义</h3><p>变量可以使用多个 <code>var</code> 语句来定义，或者使用单个组合的 <code>var</code> 语句。</p>
<pre>// This works:
var test = 1;
var test2 = function() { ... };
var test3 = test2( test );

// And so does this:
var test4 = 1,
    test5 = function() { ... },
    test6 = test2( test );</pre><p>变量可以在声明时不分配一个值，程序会给它们一个默认的值 <code>undefined</code>。</p>
<pre>var x;
x === undefined; // true</pre>]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[运行代码]]></title>
        <link href="javascript-101/running-code.html"/>
        <published>2015-03-03T00:00:00.000Z</published>
        <updated>2015-03-03T00:00:00.000Z</updated>
        <id>javascript-101/running-code.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h3 id="外部">外部</h3><p>第一种也是推荐的方式是在一个外部文件（带有 <code>.js</code> 扩展名）编写代码，然后可以使用 HTML <code>script</code> 元素并通过 <code>src</code> 属性指定文件的位置来引入到网页中。当你需要将代码重复使用在其他页面时，保持 JavaScript 在一个单独的文件中可以减少代码的重复。另外它也可以让浏览器将文件缓存到客户端的计算机上，减少网页加载时间。</p>
<pre>&lt;!-- Code is written in a .js file, included via the script tag src attribute. --&gt;
&lt;script src=&quot;/path/to/example.js&quot;&gt;&lt;/script&gt;</pre><h3 id="内嵌">内嵌</h3><p>第二种方式是直接将代码内嵌在网页中。它也是通过 HTML <code>script</code> 元素实现，但不是通过 <code>src</code> 属性指定一个文件，而是将代码放置在元素中间。虽然有些情况下可以使用这种方式，但大部分时间，最好是如上所述将我们的代码放置在外部文件中。</p>
<pre>&lt;!-- Embed code directly on a web page using script tags. --&gt;
&lt;script&gt;
alert( &quot;Hello World!&quot; );
&lt;/script&gt;</pre><h3 id="属性">属性</h3><p>最后一个选择是使用 HTML 元素的事件处理程序属性。这种方式是强烈不推荐的：</p>
<pre>&lt;!-- Inline code directly on HTML elements being clicked. --&gt;
&lt;a href=&quot;javascript:alert( &#39;Hello World&#39; );&quot;&gt;Click Me!&lt;/a&gt;
&lt;button onclick=&quot;alert( &#39;Good Bye World&#39; );&quot;&gt;Click Me Too!&lt;/button&gt;</pre><h3 id="位置">位置</h3><p>在上面的前两个方式中，代码的位置是重要的，并且需要根据情况而改变。如果你添加不访问页面元素的 JavaScript，你可以放心的把脚本放在 HTML <code>&lt;/head&gt;</code> 之前。但是，如果代码将于页面上的元素交互，就必须确保在执行代码时这些元素已经存在了。可以在下面的例子中看到这个常见的陷阱，一段查找 ID 为 <code>hello-world</code> 的元素脚本将会在页面定义元素之前执行。</p>
<pre>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script&gt;
    // Attempting to access an element too early will have unexpected results.
    var title = document.getElementById( &quot;hello-world&quot; );
    console.log( title );
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;hello-world&quot;&gt;Hello World&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;</pre><p>一个常见的模式是将脚本移动到页面的底部，HTML <code>&lt;/body&gt;</code> 前。这可以保证当执行代码时，元素已经在页面中定义了：</p>
<pre>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;hello-world&quot;&gt;Hello World&lt;/h1&gt;
&lt;script&gt;
// Moving the script to the bottom of the page will make sure the element exists.
var title = document.getElementById( &quot;hello-world&quot; );
console.log( title );
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</pre>]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[入门]]></title>
        <link href="javascript-101/getting-started.html"/>
        <published>2015-02-28T00:00:00.000Z</published>
        <updated>2015-02-28T00:00:00.000Z</updated>
        <id>javascript-101/getting-started.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="网页的解剖学">网页的解剖学</h2><p>在深入 JavaScript 之前，对网页的解剖有助于理解 JavaScript 是如何与其他网络技术密切合作的。</p>
<h2 id="html-是内容">HTML 是内容</h2><p>HTML 是用来定义和描述内容的标记语言。无论是博客文章，搜索引擎结果，或者电商网站，网页的核心内容都是用 HTML 编写的。语义标记是指 HTML 中用来描述内容的通用术语（头部，段落，图片等）。</p>
<h2 id="css-是表现">CSS 是表现</h2><p>CSS 是一个为 HTML 文档应用样式的附加语言。CSS 的全部都是关于如何通过定义字体，颜色等其他视觉美感，让内容更好看。CSS 的强大之处在于样式不再和内容夹杂，这意味着你可以将不同的样式应用到同一块内容，当构建良好跨设备响应式网站时，这是至关重要的。</p>
<h2 id="javascript-是交互">JavaScript 是交互</h2><p>在浏览器中，JavaScript 为 HTML 内容添加交互性和行为能力。没有 JavaScript，网页将会是静态和无聊的。JavaScript 使网页富有生命力。</p>
<p>看下面这个包含了 CSS 和 JavaScript 的简单 HTML 页面，了解这一切是如何组织在一起的：</p>
<pre>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Hello World&lt;/title&gt;

    &lt;!-- CSS for presentation. --&gt;
    &lt;style&gt;
    h1 { font-size: 14px; color: hotpink; }
    button { color: red; }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Hello World&lt;/h1&gt;
    &lt;button&gt;Click Me!&lt;/button&gt;

    &lt;!-- JavaScript for interactivity. --&gt;
    &lt;script&gt;

    // Get a handle on the first button element in the document.
    var button = document.querySelector( &quot;button&quot; );

    // If a user clicks on it, say hello!
    button.addEventListener( &quot;click&quot;, function( ev ) {
        alert( &quot;Hello&quot; );
    }, false);

    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre><p>在上面的例子中，HTML 是用来描述内容，“Hello World” 文本被 <code>h1</code> 元素描述为一个标题，“Click Me!”被 <code>button</code> 元素描述为一个按钮。<code>style</code> 代码块包含了改变标题颜色和字体大小的 CSS。<code>script</code> 代码块包含了给按钮添加交互的 JavaScript。当用户点击这个按钮，会弹出一个显示“Hello”的警告信息。</p>
<h2 id="web-的脚本语言">Web 的脚本语言</h2><p>JavaScript 最初设计为网页添加交互性，而不是成为一个通用语言，所以它被设计为脚本语言。<a href="http://zh.wikipedia.org/wiki/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a> 被认为是比通用语言更高效，因为它们是为它们特定的领域（如 JavaScript 为网络浏览器）而优化。然而，最近的技术发展让 JavaScript 在服务器端大热（通过 <a href="http://nodejs.org/">Node.js</a>），所以它现在也可以用于代替 PHP,Ruby 或者 ASP等语言。本指南将专注于在浏览器中运行的 JavaScript。</p>
<p>“JavaScript” 这个名字有点误导性。尽管有相似的名字，但是 JavaScript 与 <a href="https://zh.wikipedia.org/wiki/Java">Java</a>（一种通用语言）没有任何关系。JavaScript 是基于开放式网络标准 ECMAScript。基于标准的语言不是任何一个实体或公司控制的－相反的，开发商们共同制定语言，这就是为什么 JavaScript 运行在每一个 Web 浏览器中，而无关操作系统或设备。</p>
<h2 id="你需要什么来开始学习-javascript-和-jquery">你需要什么来开始学习 JavaScript 和 jQuery</h2><ol>
<li>Web 浏览器</li>
<li>文本编辑器</li>
<li>开发者工具 (可选项)</li>
</ol>
<p>JavaScript 的最大优势之一是它的简单。它可以在任何操作系统上编写和运行，唯一的要求是一个网络浏览器和文本编辑器。也有许多工具可以让 JavaScript 开发更有效率，但它们是完全可选的。</p>
<h2 id="开发者工具">开发者工具</h2><p>许多浏览器附带的内置功能，通常被称为“开发者工具”，它提供了更好的视角来观察运行在浏览器里的 JavaScript 和 jQuery。虽然不是必须的，但当你调试代码错误时，你会发现开发者工具很有用。看看常见的浏览器开发者工具：</p>
<ul>
<li><a href="https://developer.apple.com/cn/technologies/safari/developer-tools.html">Safari 开发者工具</a></li>
<li><a href="https://developers.google.com/chrome-developer-tools/">Google Chrome Developer Tools</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/ie/gg589507.aspx">IE 开发者工具</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Tools">火狐开发者工具</a></li>
<li><a href="http://www.opera.com/dragonfly/">Opera Dragonfly</a></li>
</ul>
]]>
        </content>
    </entry>
</feed>